const express = require('express')
const {check, validationResult} = require('express-validator')
const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const dotenv = require('dotenv')
const User = require('../../models/User')

const router = express.Router()
dotenv.config()

// @route  POST api/users
// @desc   Register user
// @access Public
router.post('/', [
    // Validation checks to ensure we get data expected.
    check('name', 'Name is required.').not().isEmpty(),
    check('email', 'Please include a valid email.').not.isEmpty(),
    check('password', 'Please enter a password with at least 6 characters.').isLength({min: 6})
], async (req, res) => {
    // Check that our... checks are valid
    const validationErrors = validationResult(req)
    if (!validationErrors.isEmpty()) {
        // Send bad request if we have any errors.
        return res.status(400).json({ errors: errors.array() })
    }

    // Parse out the required information from the request body
    const {name, email, password} = req.body

    try {
        // Check if the user already exists
        let user = await User.findOne({email: email})
        if (user) {
            // Found this user - send bad request
            return res.status(400).json({errors: [ {msg: 'User already exists for this email'}]})
        }

        // Create our user
        user = new User({
            name: name,
            email: email,
            // Creation date will be made by default to NOW
            //We're not going to store unencrypted password
        })

        // Encypt the password
        const salt = await bcrypt.genSalt(10)
        user.password = await bcrypt.hash(password, salt)

        // Now we can save our user
        await user.save()

        // Return the jsonwebtoken so the user is logged in immediately after registering
        const payload = {
            user: {
                id: user.id //user's id auto-generated by mongoDB
            }
        }

        // Set our timeout for the token
        // Default to an hour, unless in development mode
        const timeout = process.env.DEVELOPMENT ? 360000 : 3600

        // Sign our token
        jwt.sign(
            payload,
            process.env.JWT_SECRET,
            {expiresIn: timeout},
            (err, token) => {
                // Send token to client on callback
                if (err) {throw err}
                // No error, return token
                return res.json({token})
            },
        )
        console.log('User registered')
    } catch (error) {
        console.error('Error registering: ', err.message)
        return res.status(500).send('Server error')
    }
})


// @route  DELTE api/users
// @desc   Delete user
// @access Private

module.exports = router
version: '3.1'

# Make sure you have a .env file in the same dir as the compose to set environmental variables properly.
# Or you can hard code this file
services:
# Database setup
  mongo:
    image: mongo
    restart: always
    volumes:
      # Make sure our data is persistent
      - ./Database/mongodb_data:/data/db
    env_file:
      - .env
    ports:
      # Expose the mongo db outside the container
      - ${MONGODB_PORT}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASS}

  # Optional, use this to view your DB
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - ${MONGOEXPRESS_PORT}:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGOEXPRESS_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGOEXPRESS_PASS}
  
# Server setup
  server:
    # Wait until mongo is up to make the server
    # Technically not really needed, but can avoid potential issues
    depends_on:
      - mongo
    build:
      # Where to find the docker file for the server
      context: ./server
    # Keeping restart off; If it fails, prob should stay down
    # TODO: The restart function ahs been changed to always since there's
    # a bug that makes it crash.  Once a fix has been determined,
    # turn this back to off to help with figuring out any other
    # bugs that may last a long time.
    restart: always
    volumes:
      # Don't overwrite this folder
      - /srv/node_modules
      # HTTPS certificate and key are stored here.
      - ./keys:/../keys
      # Redirect anything else in our server folder to the container
      # Note that '/srv' is the working directory in the container
      - ./server:/srv
    env_file:
      - .env
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASS=${ADMIN_PASS}
      - MONGODB_PASS=${MONGODB_PASS}
      - MONGODB_USER=${MONGODB_USER}
      # Host should be same as IP the machine this compose is run on!
      - MONGODB_HOST=${MONGODB_HOST}
      - MONGODB_PORT=${MONGODB_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      # For hosting via HTTPS versus HTTP
      - HTTPS=${HTTPS}
      - CERT_PATH=${CERT_PATH}
      - CERT_KEY_PATH=${CERT_KEY_PATH}
      - CERT_PASSPHRASE=${CERT_PASSPHRASE}
    ports:
      # Map external port to internal port. Use environ var
      - ${SERVER_PORT}:${SERVER_PORT}

# Client setup
  client:
    build:
      context: ./leetcode-srs
    restart: on-failure
    volumes:
      # Don't overwrite this folder
      - /leetcode-srs/node_modules
      # Redirect anything else in our frontend folder to the container
      # Note that '/client' is the working directory in the container
      - ./leetcode-srs:/client
    # Use both the default .env and the .env for the leetcode-srs client
    env_file:
      - ./leetcode-srs/.env
      - .env
    environment:
      # What should client port actually be...?
      - CLIENT_PORT=3000
      - API_PORT=${SERVER_PORT}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_API_PROTOCOL=${REACT_APP_API_PROTOCOL}
      - REACT_APP_API_PORT=${SERVER_PORT}
      - REACT_APP_HOST_URL=${REACT_APP_HOST_URL}
    ports:
      - ${NGINX_PORT}:80